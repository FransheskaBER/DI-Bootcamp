<html lang="en">
    <%- include('../partials/head') %>
    <body>
        <%- include('../partials/header') %>

        <form method="POST" action="/search/title">
            <label>Search Title: <input type="text" name="title"></label>
            <button>Search</button>
        </form>

        <form method="POST" action="/search/category">
            <label>Searched Category:</label>
            <select name="category" required>
                <option value="">--Choose category --</option>
                <% if (categories && categories.length) { %>
                    <% categories.forEach(cat => { %>
                        <option value="<%= cat %>"><%= cat %></option>
                    <% }) %>
                <% } else { %>
                    <option disabled>No categories available</option>
                <% } %>
            </select>
            <button type="submit">Search</button>
        </form>

        <% if (error) { %>
            <p style="color: red"><%= error %></p>
        <% } %>

        <%- include('../partials/posts', { posts }) %>

        <%- include('../partials/footer') %>
    </body>
</html>

<!-- server.js -->
 <!-- import Parser from "rss-parser";
import express from "express";
import cors from "cors";
import path from "path";

const app = express();

app.use(express.json());
app.use(cors()); // allows all origins
app.use(express.urlencoded({ extended: false })); // form parsing

app.set("views", path.join(process.cwd(), "public"));
app.set("view engine", "ejs");

const parser = new Parser();

async function getFeed() {
    const feed = await parser.parseURL(`https://thefactfile.org/feed/`);
    // feed.items.forEach(item => console.log(item.title));
    return feed.items;
}

function buildCategories(posts){
    return [...new Set(posts.flatMap(post => post.categories || []).filter(Boolean))];
}

app.get("/", async (req, res) => {
    try {
        const posts = await getFeed();
        if (!posts || posts.length === 0) throw new Error("No posts found");
        res.render("pages/index.ejs", { posts, error: null });
    } catch (err){
        res.render("pages/index", { posts: [], error: err.message });
    }
})

app.get("/search", async (req, res) => {
    try {
        const posts = await getFeed();
        const categories = buildCategories(posts);
        res.render("pages/search.ejs", { posts: [], categories, error: null });
    } catch (err){
        res.render("pages/search.ejs", { posts: [], categories, error: err.message });
    }
})

app.post("/search/title", async (req, res) => {
    try {
        const { title } = req.body;
        if (!title) {
            return res.render("pages/search.ejs", { posts: [], categories, error: "Please enter a title to search."});
        }
        const posts = await getFeed();
        const categories = buildCategories(posts);

        const t = title.trim().toLowerCase();
        const filtered = posts.filter(post => (post.title || "").toLowerCase().includes(t));

        res.render("pages/search.ejs", { posts: filtered, categories, error: filtered.length ? null : `No posts found for title "${title}"` });
    } catch (err){
        res.render("pages/search.ejs", { posts: [], categories, error: err.message || "Search failed" });
    }
})

app.post("/search/category", async (req, res) => {
    try {
        const { category } = req.body;
        if (!category) {
            return res.render("pages/search.ejs", { posts: [], error: "Please choose a category to search."});
        }
        const posts = await getFeed();
        const categories = buildCategories(posts);

        const c = category.trim().toLowerCase();
        const filtered = posts.filter(post => (post.categories || []).some(cat => (cat || "").toLowerCase().includes(c)));
        res.render("pages/search.ejs", { posts: filtered, categories, error: filtered.length ? null : `No posts found for category "${category}"` });
    } catch (err){
        res.render("pages/search.ejs", { posts: [], categories, error: err.message || "Search failed" });
    }
})



const PORT = 8800;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`)); -->
